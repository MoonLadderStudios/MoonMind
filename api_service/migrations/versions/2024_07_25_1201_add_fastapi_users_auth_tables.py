"""add_fastapi_users_auth_tables

Revision ID: 2024_07_25_1201
Revises: 2024_07_25_1200
Create Date: 2024-07-26 10:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2024_07_25_1201'
down_revision: Union[str, None] = '2024_07_25_1200'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the old user table if it exists from the previous migration
    # This is a simplified check; in a real scenario, you might inspect columns
    # or handle this more robustly if the old table structure is uncertain.
    # For now, we assume if 'user' table exists, it's the old one.
    # A more precise way would be to check for the existence of specific columns
    # that differ, like an integer 'id' vs a UUID 'id'.

    # Attempt to drop the old table. If it doesn't exist, it might raise an error
    # or do nothing depending on the DB and context.
    # A safer way is to check for its existence first, but for simplicity:
    try:
        op.drop_table('user')
    except Exception as e:
        print(f"Could not drop 'user' table (it might not exist or have dependencies): {e}")
        # If it fails, it might be because it doesn't exist, which is fine.
        # Or it might have dependencies if actual data/relations were built on the int ID version.

    op.create_table('user',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')

    # Recreate the old user table if needed for downgrade
    op.create_table('user',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        # Add other columns from the old user table if they existed
        # For example, if it had an email:
        # sa.Column('email', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
